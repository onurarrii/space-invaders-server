package com.group14.termproject.server.game.model.spaceship;

import com.group14.termproject.server.game.model.GameObject;
import com.group14.termproject.server.game.model.bullet.Bullet;
import com.group14.termproject.server.game.util.enums.SpaceshipTier;
import com.group14.termproject.server.game.util.enums.SpaceshipType;

import java.util.function.Consumer;

public interface Spaceship extends GameObject {
    SpaceshipType getSpaceshipType();

    double getDamage();

    double getMaxHealth();

    double getHealth();

    SpaceshipTier getTier();

    boolean isEnemy(Spaceship other);

    /**
     * Fires a bullet which is headed in the same way that spaceship looks.
     *
     * @return generated bullet
     */
    Bullet fire();

    /**
     * <p>
     * Used to bind a callback function which will be invoked whenever a bullet is generated by the spaceship.
     * The given {@code callback} is called with parameter generated bullet object.
     * </p>
     *
     * <p>
     * After calling the method, the previous callback (if there exists any) is overridden. Thus, it will not be called
     * after next bullet generation. Only the last callback is called.
     * </p>
     *
     * @param callback function to be invoked after bullet generation.
     */
    void bindBulletGenerationCallback(Consumer<Bullet> callback);

    /**
     * Should be called by the attacker when it tries to deal damage.
     * Note that the damage can be reduced, or even denied completely based on the spaceship's skills and stats.
     *
     * @param dealer An enemy spaceship trying to deal damage.
     * @param damage Amount of damage point generated by the enemy.
     */
    void onDamageDealt(Spaceship dealer, double damage);


    /**
     * Each enemy spaceship is worth a score value based on its quality.
     * The method calculates the spaceship's score value.
     *
     * @return a number indicating how many score points will be given to the killer.
     */
    double getScoreValue();

    /**
     * Should be called by the enemy when it is killed by {@code this}.
     *
     * @param spaceship enemy spaceship that is killed.
     */
    default void onEnemyKilled(Spaceship spaceship) {
    }
}
