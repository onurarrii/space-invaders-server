package com.group14.termproject.server.game.model.bullet;

import com.group14.termproject.server.AuthTestUtil;
import com.group14.termproject.server.game.factory.GameObjectFactory;
import com.group14.termproject.server.game.model.spaceship.Spaceship;
import com.group14.termproject.server.game.util.GameConstants;
import com.group14.termproject.server.game.util.Vector2D;
import com.group14.termproject.server.game.util.enums.BulletType;
import com.group14.termproject.server.game.util.enums.SpaceshipTier;
import com.group14.termproject.server.game.util.enums.SpaceshipType;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.util.ReflectionTestUtils;

import javax.transaction.Transactional;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class BulletTests {

    GameObjectFactory gameObjectFactory;
    Spaceship dummyEnemySpaceship;
    Spaceship dummyPlayerSpaceship;
    long dummyUserId;

    @Autowired
    AuthTestUtil authTestUtil;

    @Before
    public void setup() {
        gameObjectFactory = GameObjectFactory.getInstance();
        dummyEnemySpaceship = gameObjectFactory.getEnemySpaceship(SpaceshipTier.TIER1);
        dummyUserId = authTestUtil.generateRegisteredUser().getId();
        dummyPlayerSpaceship = gameObjectFactory.getPlayerSpaceship(dummyUserId, SpaceshipTier.TIER1);
    }

    @Test
    public void testIsInTheGrid() {

        Bullet bullet = gameObjectFactory.getBullet(dummyEnemySpaceship, BulletType.BASIC);
        // When bullet is outside of the grid
        Vector2D outsidePosition = new Vector2D(GameConstants.GRID_WIDTH + 1, GameConstants.GRID_HEIGHT + 1);
        bullet.getRigidBody().reposition(outsidePosition);
        Boolean result = ReflectionTestUtils.invokeMethod(bullet, "isInTheGrid");
        // Firstly, check if method is invoked properly.
        Assert.assertNotNull(result);
        Assert.assertFalse(result);

        // When bullet is inside the grid
        Vector2D insidePosition = new Vector2D(GameConstants.GRID_WIDTH - 1, GameConstants.GRID_HEIGHT - 1);
        bullet.getRigidBody().reposition(insidePosition);
        result = ReflectionTestUtils.invokeMethod(bullet, "isInTheGrid");
        // Firstly, check if method is invoked properly.
        Assert.assertNotNull(result);
        Assert.assertTrue(result);

        // When bullet is at the edge
        Vector2D edge = new Vector2D(GameConstants.GRID_WIDTH, GameConstants.GRID_HEIGHT);
        bullet.getRigidBody().reposition(edge);
        result = ReflectionTestUtils.invokeMethod(bullet, "isInTheGrid");
        // Firstly, check if method is invoked properly.
        Assert.assertNotNull(result);
        Assert.assertFalse(result);

    }

    @Test
    public void testBasicBulletCollision() {
        Bullet bullet = gameObjectFactory.getBullet(dummyEnemySpaceship, BulletType.BASIC);
        Assert.assertEquals(BulletType.BASIC, bullet.getType());
        bullet.onCollision(dummyPlayerSpaceship);
        // After a hit, the bullet should be destroyed
        Assert.assertTrue(bullet.isDestroyed());
    }

    @Test
    public void testEnhancedBulletCollision() {
        Bullet bullet = gameObjectFactory.getBullet(dummyEnemySpaceship, BulletType.ENHANCED);
        Assert.assertEquals(BulletType.ENHANCED, bullet.getType());
        bullet.onCollision(dummyPlayerSpaceship);
        // A hit should not cause it to be destroyed.
        Assert.assertFalse(bullet.isDestroyed());

        // It should be destroyed after 1 + 2 = 3 hits
        bullet.onCollision(dummyPlayerSpaceship);
        Assert.assertFalse(bullet.isDestroyed());
        bullet.onCollision(dummyPlayerSpaceship);
        Assert.assertTrue(bullet.isDestroyed());
    }

    @Test
    public void testCollisionWithFriend() {
        // When it is generated by an enemy and hits an enemy.
        Bullet enemyBullet = gameObjectFactory.getBullet(dummyEnemySpaceship, BulletType.BASIC);
        enemyBullet.onCollision(gameObjectFactory.getEnemySpaceship(SpaceshipTier.TIER1));
        // Verify that it belongs to an enemy
        Assert.assertEquals(SpaceshipType.ENEMY, enemyBullet.getOwnerType());
        Assert.assertFalse(enemyBullet.isDestroyed());
    }
}
